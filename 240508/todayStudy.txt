########################################################

*테이블 중복 오류 있을 시 
SQLSTATE[42S01]: Base table or view already exists: 1050 Table '테이블' already exists
오류 있을 시 ->
php artisan:reset or fresh->
phpmyadmin 들어가서 테이블 남아 있으면 직접 삭제 ->
후에 다시 한번 php artisan migrate

*인증 미들웨워(middleware) 
미들웨어란 라우팅과 컨트롤러 사이에서 동작하며 HTTP리퀘스트를 필터링함 
예를들면, 로그인상태에 따라 액세스 허가, 금지 라우팅의 제어를 하는 역할을 함 

예.
Route::group(['middleware' => ['auth']], function(){
    //mypage
    Route::get('/home', [HomeController::class, 'index'])->name('home');
    //msg resrc route
    Route::resource('messages', MessageController::class);
});

group()메소드를 사용해 그룹을 만들어줌 
auth라 하는 인증 미들웨어를 통하는 라우트를 그룹핑함 
7개의 메소드 중 로그인 체크가 필요한 것들을 체크함 


*인가란?
하고자 하는 조작이 허가받은 유저인가. 를 체크함 혹은 혹은 엑세스 권한이라고 말함. 
예를 들면 이번에 만든 서적앱 에서는 자신이 투고한 서적만을 편집 삭제 가능하도록 제어함.

*인가 절차 !참고 129페이지 
1. policy 작성
- php artisan make:policy BookPolicy --model=Book 으로 작성 / 옵션으로 북 모델 지정 

2. app/Policies/BookPolicy.php
 
3. Policy와 Controller의 메소드 차이 !참고 131페이지
- 편집화면의표시 : update() / edit()
- 갱신 액션 : update() / update()
- 삭제 액션 : delete() / destroy()

그 외 처리는 131p - 132p 참고 

*부정한 링크 지우기 !133p
@if($book->user_id == Auth::id()) 
로 user_id가 로그인 한 유저와 일치하는지 체크 

*유저 입력값 검증
입력값을 갱신, 등록 하다보면 내용에 따라 에러가 발생할 때가 있음.
이런걸 사전에 방지하고자 바리데이션을 사용함 

*validate / 바리데이션 
    public function update(Request $request, Book $book)
    {
        
        $this->authorize($book);
        //예시 이 부분 볼것 
        $this->validate($request, [
            'title' => 'required|max:100', // required는 필수입력 최대 100문자까지
            'author' => 'max:100', 
            'publisher' => 'max:100'
        ]);
        $book->update($request->all());
        return redirect(route('books.show', $book));
    }

이 후 액션 메세지 표시하여 에러 메시지 띄우면 됨 !참고 136p

*마이그레이션 !참고 139p
    public function up()
    {
        Schema::create('likes', function (Blueprint $table) {
            $table->id();
            $table->bigInteger('user_id')->unsigned()->index();
            $table->bigInteger('book_id')->unsigned()->index();
            $table->timestamps();

            //외부키 설정
            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
            $table->foreign('book_id')->references('id')->on('books')->onDelete('cascade');

            //유니크 설정
            $table->unique(['user_id', 'book_id']);
        });
    }

//외부키 설정
- likes테이블은 users와 books의 중간 테이블임 그렇기에 2개의 외부키를 설정할 필요가 있음 

//유니크 설정 
유니크 메소드를 통해 제약조건을 실현할 수 있음 
예를 들면 좋아요 기능을 할 때 한 유저가 다른 게시물의 좋아요를 2회 못하게 막는 등 

*그 외 컨트롤러 attach 등 !서적참고 141 - 147
