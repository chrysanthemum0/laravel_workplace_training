 *DB 릴레이션 
 
 ✏️ 1:多

한 모델이 다른 모델과 여러 개의 관계를 가지는 경우를 말합니다. 
예를 들어, 유저(User)과 게시물(Posts) 간의 관계가 있을 수 있습니다. 
하나의 게시물은 여러 개의 댓글을 가질 수 있지만, 하나의 댓글은 하나의 게시물에 속할 수 있습니다.

class User extends Model
{
    public function posts()
    {
        return $this->hasMany(Post::class);
    }
}

User 모델 클래스에서 관계 메소드를 정의합니다.

class Post extends Model
{
    public function user()
    {
        return $this->belongsTo(User::class);
    }
}

Post 모델 클래스에서 역방향 관계를 정의합니다.

위의 코드에서 hasMany()는 User 모델이 Post 모델과 일대다 관계를 가진다는 것을 나타내고, 
belongsTo()는 Post 모델이 User 모델에 속한다는 것을 나타냅니다.

위의 코드에서 $user->posts는 특정 사용자의 게시물들을 조회하고, 
$post->user는 특정 게시물의 작성자를 조회합니다.

📒 외래키 명시
라라벨에서는 일대다(One-to-Many) 관계를 설정하는 다양한 방법이 있습니다.
$this->hasMany() 와 $this->belongsTo() 메소드를 사용한 방법 외에 외래 키를 직접 명시하는 방법을 사용할 수도 있습니다

class User extends Model
{
    protected $primaryKey = 'user_id';

    public function posts()
    {
        return $this->hasMany(Post::class, 'user_id');
    }
}
hasMany 메소드의 두 번째 인자로 외래 키를 직접 명시했습니다. 
이를 통해 기본적으로 예상되는 외래 키 이름이 아닌 사용자 정의된 외래 키를 사용할 수 있습니다.


✏️ 多:多
한 모델이 다른 모델과 다중 관계를 가지고 서로 연결되는 경우를 말합니다.
예를 들어, 사용자(User)과 역할(Role) 간의 관계가 있을 수 있습니다. 
한 명의 학생은 여러 개의 강의를 수강할 수 있으며, 한 강의는 여러 명의 학생들에게 개설될 수 있습니다.
이 경우에는 중간에 연결 테이블이 필요하며, 라라벨에서는 편리한 방법으로 다대다 관계를 다룰 수 있습니다.

class Role extends Model
{
    public function users()
    {
        return $this->belongsToMany(User::class, 'user_role');
    }
}
위의 예시에서 belongsToMany() 메소드를 사용하여 다대다 관계를 설정했습니다. 
첫 번째 인자로 관계할 모델의 클래스명을 전달하고, 두 번째 인자로 중간 피벗 테이블의 이름을 전달했습니다.

중간 피벗 테이블의 이름은 user_role로 가정했습니다. 
이 피벗 테이블은 users 테이블과 roles 테이블 간의 다대다 관계를 표현하는 역할을 합니다. 
이 피벗 테이블은 user_id와 role_id와 같은 두 개의 외래 키를 포함해야 합니다.

다대다 관계가 설정되면 사용자 모델에서는 $user->roles로 사용자의 역할을 조회할 수 있고, 
역할 모델에서는 $role->users로 해당 역할에 속한 사용자를 조회할 수 있습니다.

다대다 관계를 설정할 때 중간 피벗 테이블의 이름과 외래 키 컬럼을 적절히 지정해야 합니다.


*컨트롤러 예시
출처: https://dev-overload.tistory.com/4 [E: overload:티스토리]

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Memo; //Memo 모델을 사용한다.

class MainController extends Controller
{
    //웹 최초 진입시 처리.
    public function index(){
    	// memos 테이블에서 메모 생성 날짜 기준 내림차순으로 정렬해 가져온다.
        $memos = Memo::orderBy('created_at', 'desc')->get();
        //index view와 가져온 메모 데이터를 렌더링해 브라우저에 출력.
        return view('index',['memos' => $memos]);
    }
	
    //create 요청을 받는다.
    public function create(){
        return view('create'); //view를 렌더링해 브라우저에 출력.
    }
	
    //create view에서 메모 삽입 요청시 처리.
    public function store(Request $request){
    
    	//request 객체를 통해 메모 내용을 가져온다.
        //validate 메서드를 이용해 메모 길이가 500을 넘는지 검사한다.
        //500이 넘어가면 create view에 에러를 반환하고 데이터는 삽입되지 않는다.
        $content = $request->validate(['content' => 'required:max:500']);
        
        //memos테이블에 데이터 삽입.
        Memo::create($content);
        
        //삽입이 끝나면 index 메서드로 리다이렉트.
        return redirect()->route('index');
    }
	
    //메모 수정 요청
    public function edit(Request $request){
        //request 객체를 통해 수정하고자 하는 메모의 id값을 받는다.
        $memo = Memo::find($request->id);
        
        //edit view와 해당 메모를 렌더링, 브라우저 출력
        return view('edit',['memo' => $memo]);
    }

    //edit view에서 수정된 메모를 적용하는 요청.
    public function update(Request $request){

        //memo테이블에서 요청 받은 id값의 데이터를 호출.
        $memo = Memo::find($request->id);
        
        //메모 내용이 500자가 넘는지 검사.
        $content = $request->validate(['content' => 'required:max:500']);

        //수정된 메모를 테이블에 적용하고 save한다.
        $memo->fill($content)->save();
        
        //index 메서드로 리다이렉트.
        return redirect()->route('index');
    }
	
    //메모 삭제 요청
    public function delete(Request $request){
        //id를 통해 해당하는 row를 찾는다.
        $memo = Memo::find($request->id);
        
        $memo->delete(); // row 삭제.
         //index 메서드로 리다이렉트.
        return redirect()->route('index');
    }
}

index
메인 페이지 요청

create
메모 작성 페이지 요청

store
메모 삽입 요청

edit
메모 수정 페이지 요청

update
메모 수정 적용 요청

delete
메모 삭제 요청

Model 추가 
<?php
use App\Memo;

namespace App;

use Illuminate\Database\Eloquent\Model;

class Memo extends Model
{
    protected $table ='memos';
    protected $fillable =['content'];
}

Memo.php 파일을 열어 class 내부에 테이블을 지정합니다.
그리고 fillable을 선언해 content 칼럼의 대량 할당을 허용합니다.
fillable 선언의 의미는, 테이블에 메모 내용(content 칼럼)은 크기가 커도 삽입을 허용한다라는 의미입니다.
laravel에서는 보안상의 이유로 데이터 대량 할당을 기본적으로는 허용하지 않습니다.


Eloquent ORM에 대한 부연 설명
 $memo = Memo::find($request->id);
위 구문은 Controller에서 Memo 클래스에 접근해 find($request->id)로 id가 일치하는 row를 찾아내는 구문입니다.
laravel에서는 Eloquent ORM을 사용해 쿼리문을 사용하지 않고 코드 형태로 mysql에 접근해 통신할 수 있습니다. 

자세한 방법 ↓
출처: https://dev-overload.tistory.com/4 [E: overload:티스토리]
