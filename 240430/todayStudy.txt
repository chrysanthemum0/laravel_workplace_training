
###################################################
laravel BASIC*
프레임워크란?
- 웹 어플리케이션 개발에 필요한 라이브러리, 유틸리티 프로그램의 패키지 소프트웨어를 만들기위헤
재료와 도구의 집합체, 이러한 소재들을 총칭해 프레임 워크라고 부름

프레임워크의 구조
- 공통해 있는 부분들을 부품화해 필요한 부분을 끌어와서 편하게 만들 수 있음 
부품의 사용법만 알면 여러 시스템을 만듬에 있어 효과적 


shell에서 경로 설정 후 
php artisan serve로 기동 

#####MVC 아키텍쳐 
라라벨 이외에도 MVC 설계로 진행함
어플리케이션 구성요소를 모델(M), 뷰(V), 컨트롤러(C)

MODEL : DB에 엑세스해 데이터를 읽어들이고 값의 검증 가공 등을 함
VIEW : 유저인터페이스의 표현, 특히 HTML을 생성. 
Controller : 말 그대로 컨트롤, 조작 가능. 
유저가 조작을 하면 HTTP 리퀘스트를 받으며 뷰를 보여주며 각종 조작이나 처리를 가능하게 해줌 

주의 점 
컨트롤러는 자신도 여러가지 처리를 행하지만, 모델이나 뷰의 역할을 할 수 있게 하는 것도 중요 


<!-----MVC 및 기본 설정 방법 25p ~ 57p ----------!>

* laravel 신규 어플리케이션 / 워크스페이스 설정
- 원하는 경로 폴더 생성 예. cd dektop mkdir laravel
- cd laravel
- composer create-project laravel/laravel 작업 폴더명 "9.*" --prefer-dist
- cd 작업 폴더명 
- php artisan serve --> 로 작업 폴더 기동 가능 


*DB만들기
1.xampp/mysql/bin
2.mysql -u root -p
3.CREATE DATABASE DB명
4.show databases; ->로 db들어갔는지 확인 

*DB의 접속설정
1..env 파일 찾아서 
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=DB명 ---> 여기 바꾸기 
DB_USERNAME=유저명 ---> 여기 바꾸기
DB_PASSWORD=유저 패스워드 ---> 여기 바꾸기

*모델 Model M
라라벨 규약에서 테이블 이름은 books처럼 복수형으로 모델(클래스)은 Book으로 
제일 앞글자 대문자로 표현

*Artisan 커맨드 
php artisan make:model 모델명 -> 모델의 작성 artisan의 make:model의 커맨드를 사용해 모델작성
app/Modles/모델명.php --> 의 경로에서 확인가능 

*테이블 작성 / 마이그레이션
1.php artisan make:migration create_테이블명s 붙이기_table --create=테이블명s 붙이기 
2.database/migrations/yy_mm_dd_hh_create_테이블명s_table.php 가서 확인
3. Schema::create('테이블명', funtion (Blueprint $table){
    $table->id();
  ----------> 여기에 테이블에 삽입할 컬럼 작성 참고 39p
    $table->string('title');
    $table->string('name'); //animal name
    $table->string('description'); //animals info
    $table->string('image');
    $table->timestamps();
});

4. 컬럼 설정 끝나면 터미널에서 php artisan migrate 실행
5. DB패널(커맨트)가서 잘 들어갔나 확인 -> DESC 테이블명 
6. php artisan tinker 로 모델 조작 가능 41p 참고! 이걸로 데이터 삽입, 변경 가능 
7. 근데 그냥 sql터미널에서 직접 삽입하는게 편하더라...

*컨트롤러 Controller C
1. php artisan make:controller 모델명Controller --resource
2. app/HTTP/Controllers/모델명Controller.php --> 에서 잘 만들어졌는지 확인 가능

*루팅, Routes !!중요하니깐 47p~49p 참고  
1. routes/web.php -->에서 조작
2. Route::HTTP메소드(URL, 처리)
3. 라라벨에서 브라우저를 통한 웹 접근용 라우트는 routes/web.php 파일에 정의.웹 접근용 라우트는 사용자가 방문하는 URL.

4. use App\Http\Controllers\AnimalController;
Route::get('/', [AnimalController::class, 'index']); -->index가 보여줄 페이지
Route::get('/animals/{id}', [AnimalController::class, 'show']);

5.하고 나면 탑 페이지 처리 --> 경로 app/Http/Controllers/파일명Controller.php
  public function index()
    {
        //
        $animals = \App\Models\Animal::all();
        return view('index', ['animals' => $animals]);
    }

        public function show($name)
    {
        //
        $animal = \App\Models\Animal::find($name);
        return view('show', ['animal' => $animal]);
    }

* 뷰 View V
컨트롤러 완성 후 URL에 응해 적절한 HTML페이지를 화면에 표시하는 작업 

1. 뷰의 작성 경로 resources/views/ --> 에다가 파일명.blade.php 로 작성 
2. blade에서는 HTML의 기술을 베이스로도 하면서 독립적으로 구문에 따라 프로그램 코드를 넣어 
PHP변수나 제어문등을 사용할 수 있음.

3. 예시인데 laravel 책 51p - 56p까지 참고

예)index.blade.php
<body>
    <h1>動物一覧</h1>
    @foreach ($animals as $animal)
    <p><a href="/animals/{{ $animal->id }}">{{$animal->name}}</a></p>
    @endforeach
</body>
</html>

예)show.blade.php
<body>
    <h1>動物詳細</h1>
    <h2>{{ $animal->name }}</h2>
    <p>説明 : {{ $animal->description }}</p>
    <p>画像ファイル名 : {{ $animal->image }}</p>
    <p><img src="/images/corgi.png" width="200" height="200"></p>
    <a href="/">戻る</a>
</body>
</html>
