###################################################

***라우팅 및 컨트롤러 참고 URL
https://velog.io/@chaos663/PHPLaravel-03-%EB%9D%BC%EC%9A%B0%ED%8C%85-%EB%B0%8F-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC
https://devcamus.tistory.com/4

*REST란?
Respresentational State Transfer로서 MVC아키텍쳐와 
마찬가지로 중요한 설계모델임 
laravel에 있어서는 HTTP메소드와 URL에 따라
조작내용과 조작대상을 표현 하는 것을 의미함.

*HTTP메소드와 URL !참고 60p
http는 웹브라우저와 웹 서버 안에서 html, 화상 파일 등을 
송수신 하기 위한 프로토콜임. 웹 브라우저는 웹 서버에 리퀘스트를
보내고, 웹 서버는 레스폰스를 반환함.
REST와의 관계에서 중요한것은, 리퀘스트 쪽임. 
예를 들어 GET /index.html HTTP/1.1
이면 /index.html이라는 대상을 취득(GET)하고 싶다. 라는 의미가 됨
URL에 따라 표현되는 조작의 대상을 ***리소스라고 부름 

*RESTful한 URL !참고 61p

*CRUD란? 62p
C:create / 신규작성
R:read / 취득
U:update / 갱신
D:delete / 삭제 

웹 어플리케이션 상에서 실행하기 위해 크게 7개의 루팅이 필요함

HTTP method / URL / Action / 설명 
1. GET / books / index / Book의 일람 화면 표시
2. GET / books/create / create / Book의 신규작성의 화면 표시
3. POST / books / store / Book의 신규등록
4. GET / books/{id} / show / {id}의 Book의 상세화면의 표시
5. GET / books{id}/edit / edit / {id}의 Book의 편집화면 표시
6. PUT / books{id} / update / {id}의 Book의 갱신
7. DELETE / books{id} / destroy / {id}의 Book의 삭제 

*리소스 Route !참고 p63 - p64
라라벨에는 리소스Route 라고하는 기능이 갖추어져있음. 
이거 사용하면 7개의 crud route를 1행으로 컨트롤러의 각 액션의 붙여줌

경로 : routes/web.php
기본 : Route::resource(리소스명, 콘트롤러 이름);

ex.
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\MemoController;

Route::get('/', [MemoController::class, 'index']);
Route::resource('memos',MemoController::class);

php artisan route:list 를 사용해서
Route 정의 확인 

주의점 / 실제 업무에서는 사용하는게 다를 수 도 있으므로 p64참고! 

*Route 명 
Route정의는 name()메소드를 사용해서 Route이름을 정하는것이 가능함.
Route을 사용할 URL을 불러올때에는 route()함수를 사용함
예. <a href="{{ route('memos.edit', $memo->id) }}">編集する</a>

*리소스와 컨트롤러의 관계
php artisan make:Controller 모델명Controller --resource 로 
App/Http/Controllers 경로에 CRUD에 필요한 7개의 메소드를 불러와줌

*RESTful APP 제작 --> !소스코드 및 자세한 설명은 github Or p66 - p73까지 참고


*view와 redirect()
view 헬퍼함수는 말 그대로 view페이지를 반환하기 위해 사용하는 함수이다. 
예. return view('edit', ['book' => $book]);

반면에, redirect()는 uri을 변경시키는 용도로 사용한다. 
로그인한 사용자 또는 특정 등급 이상의 사용자만 게시글을 볼 수 있는 회원제 게시판이 있다고 가정하자.
이 때, 사용자가 인증과 인가 절차에 실패했을 때. 
즉, 권한이 없는 사용자가 접근 했을 때 return view('login'); 
과 같은 형태로 로그인페이지를 띄우는 것은 REST API 원칙에도 어긋나며, 
또 다시 로그인 작업을 코드로 중복되게 작성해야하는 등 적절하지 않은 방법이다.

예. return redirect(route('books.index'));

* @csrf
라라벨은 크로스-사이트 요청 위조 공격 (CSRF)으로부터 애플리케이션을 손쉽게 보호할 수 있도록 해줍니다. 
사이트 간 요청 위조는 인증된 사용자를 대신해서 승인되지 않은 커맨드를 악의적으로 활용하는 것입니다.
폼 형태에서 데이터 넘기려할 때 주로 사용 

* @method
Form에서 PUT, PATCH, DELETE 요청을 보내는 방법을 출력합니다. 
전제적으로 HTML의 form 태그가 이러한 형식을 지원하지 않기 때문에 실제로 POST 전송이되었습니다. 
이러한 것을 피하기위한 대책입니다.

예.         <form action="{{ route('memos.update', $memo->id) }}" method="post">
            @csrf
            @method('patch')
            <dl>
                <dt>タイトル</dt>
                <dd><input type="text" name="title"
            </form>


*RESTful 한국어 사이트든 책이든 뭐든 찾아서 좀 이해해보자..
